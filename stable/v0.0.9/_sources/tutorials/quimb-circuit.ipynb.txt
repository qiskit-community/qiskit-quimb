{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Simulate Qiskit circuits with quimb\n",
    "\n",
    "This tutorial shows how to simulate Qiskit circuits with quimb.\n",
    "\n",
    "First, build a Qiskit circuit to use as an example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 305.323x200.667 with 1 Axes>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from qiskit.circuit import QuantumCircuit, QuantumRegister\n",
    "\n",
    "# Build a Qiskit circuit\n",
    "qubits = QuantumRegister(2)\n",
    "circuit = QuantumCircuit(qubits)\n",
    "a, b = qubits\n",
    "circuit.h(a)\n",
    "circuit.cx(a, b)\n",
    "\n",
    "circuit.draw(\"mpl\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Convert the Qiskit circuit (an instance of `qiskit.circuit.QuantumCircuit`) to a quimb circuit (an instance of `quimb.tensor.Circuit`):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from qiskit_quimb import quimb_circuit\n",
    "\n",
    "# Convert it to a quimb circuit\n",
    "quimb_circ = quimb_circuit(circuit)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that you have a quimb object, you have the full power of quimb at your disposal. For example, you can sample bitstrings from the circuit:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['00', '00', '11', '00', '11', '00', '11', '00', '11', '11']"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Sample 10 bitstrings\n",
    "samples = list(quimb_circ.sample(10, seed=1234))\n",
    "\n",
    "samples"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can customize the `quimb.tensor.Circuit` subclass to use, as well as specify keyword arguments to its constructor. For example, the following code cell uses quimb's quantum circuit MPS implementation, setting a maximum bond dimension:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['11', '11', '00', '00', '11', '00', '11', '11', '11', '00']"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import quimb.tensor\n",
    "\n",
    "# You can specify the quimb Circuit subclass and keyword arguments for the constructor\n",
    "quimb_circ = quimb_circuit(\n",
    "    circuit, quimb_circuit_class=quimb.tensor.CircuitMPS, max_bond=20\n",
    ")\n",
    "samples = list(quimb_circ.sample(10, seed=1234))\n",
    "\n",
    "samples"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "qiskit-quimb does not support every possible Qiskit gate, and in order to work with qiskit-quimb your Qiskit circuit must contain only supported gates. Notably, measurement gates are not supported. You can get the list of supported gates via `SUPPORTED_GATES`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['barrier',\n",
       " 'ccx',\n",
       " 'ccz',\n",
       " 'cp',\n",
       " 'cx',\n",
       " 'cy',\n",
       " 'cz',\n",
       " 'h',\n",
       " 'id',\n",
       " 'iswap',\n",
       " 'measure',\n",
       " 'p',\n",
       " 'rx',\n",
       " 'rxx',\n",
       " 'ry',\n",
       " 'ryy',\n",
       " 'rz',\n",
       " 'rzz',\n",
       " 's',\n",
       " 'sdg',\n",
       " 'swap',\n",
       " 't',\n",
       " 'tdg',\n",
       " 'u1',\n",
       " 'u2',\n",
       " 'u3',\n",
       " 'x',\n",
       " 'y',\n",
       " 'z']"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from qiskit_quimb import SUPPORTED_GATES\n",
    "\n",
    "list(SUPPORTED_GATES)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "qiskit-quimb",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
